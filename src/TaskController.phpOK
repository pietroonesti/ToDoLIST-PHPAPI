<?php

/*
 * TodoList API corso Udemy
 * Pietro Onesti  * 
 * 2023  * 
 */

/**
 * Description of TaskController
 * questa classe controlla il contenuto della variabile $_SERVER["REQUEST_METHOD"]
 * e decide cosa fare 
 * 
 * @author pietroonesti
 */
class TaskController {
   
    //richiamo il TaskGateway
    public function __construct(private TaskGateway $gateway) {
        
    }
    
    public function processRequest(string $method, ?string $id): void {
//    public function processRequest(string $method, string $id): void {
        
        if ($id == null) {
            
            if ($method == 'GET') {
            
//                echo "index";
                echo json_encode($this->gateway->getAll());
                
                
            }
            //GESTIONE DEL POST -> INSERIMENTO DEI DATI
            elseif ($method == 'POST'){
//                echo "CREATE";
//                print_r($_POST);
              
              
//              !!!FASE POST!!!  

                            
//recupero i dati di input del post
                $data = (array) json_decode(file_get_contents("php://input"), true);
                var_dump($data);
                
//gestisco gli errori di input dei dati
                $errors = $this->getValidationErrors($data);
                    
                    if (! empty ($errors)){
                    
                    $this->respondUnprocessableEntity($errors);
                    return;
                }
                
                $id = $this->gateway->create($data);
                $this->respondCreated($id);
            }
            
            else {
//                http_response_code(405);
//                header("Allow: GET - POST");
//                echo 'METHOD ERROR';
                $this->respondMethodNotAllowed("GET, POST");
            }
            
        } else {
            
            $task = $this->gateway->get($id);
            
                if ($task === false) {
                    
                    $this->respondNotFound($id);
                    
                    return;
                }
            
            switch ($method) {
                
                case "GET":
//                    echo "show $id";
//                echo json_encode($this->gateway->get($id));
                    echo json_encode($task);
                    break;
                
                // FASE UPDATE - PATCH
                //TEST: http patch http://localhost:8888/ToDoListApi/task/16 name="CHANGED_NOW" priority:=23 is_completed:=1
                
                
                case "PATCH";
                
                //recupero i dati di input del post
                $data = (array) json_decode(file_get_contents("php://input"), true);
                
                //gestisco gli errori di input dei dati
                $errors = $this->getValidationErrors($data, false);
                    
                //INTERCETTO EVENTUALE ERRORE
                if (! empty ($errors)){
                    
                // RISPONDO CON IL TIPO DI ERRORE                       
                    $this->respondUnprocessableEntity($errors);
                    return;
                }    
                
                $this->gateway->update($id, $data);
                
                
//                    echo "update $id";
                    break;
                
                case "DELETE":
                    echo "delete $id";
                    break;
                
//                case "POST":
//                    echo "post $id";
//                    break;
                
                default : $this->respondMethodNotAllowed("Get,PATCH, DELETE");
            }
        }
    }
 
//  FUNZIONI PER LA RISPOSTA DI ERRORE  
    private function respondUnprocessableEntity(array $errors): void {
        
        http_response_code(422);
        echo json_encode(["errors" => $errors]);
        
    }
    
    private function respondMethodNotAllowed($allowedmethods): void 
        {
            http_response_code(405);
                header("Allow: $allowedmethods");
                echo 'METHOD ERROR';
    }
    
    private function respondNotFound(string $id): void {
        
        http_response_code(404);
        echo json_encode(["message" => "Task with ID $id not found"]);
    }
    
    private function respondCreated(string $id): void {
        
        http_response_code(201);
        echo json_encode(["message" => "task created", "id: " => $id]);
    }
    
    //funzione che gestisce gli errori di inserimento dei dati
    private function getValidationErrors(array $data): array {
        
//        $errors[]; le parentesi  mi danno errore
//        $errors = array();
            $errors = array();
        
        if (count($data) === 0){
            
            $errors = ["!!input VUOTO!!"];
         }
            
        if(empty($data["name"])){
            
            $errors = ["!!name is required!!"];
            
        }
        
        if (!isset(($data["priority"]))){
            
            $errors = ["!!priority is required!!"];
         }
         
        if(!empty($data["priority"])){
            
            if(filter_var($data["priority"], FILTER_VALIDATE_INT) === false){
                
                $errors = ["priority must be an integer"];
            }
        }
       
        return $errors;
    }
}
